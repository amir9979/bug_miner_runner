# This is a basic workflow to help you get started with Actions 

name: CI 

# Controls when the action will run. Triggers the workflow on push or pull request   
# events but only for the master branch
on:
  issues:
    types: [opened]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    continue-on-error: true
    runs-on: windows-latest
    env:
      JAVA_TOOL_OPTIONS: -Duser.timezone="America/Los_Angeles" -Dfile.encoding="ISO8859_1"
      JAVA_OPTS: -Xmx2g -XX:CompressedClassSpaceSize=256m
    
    strategy:
      fail-fast: false
      matrix:
        commit_ind: [9]#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 2.7
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest 
        pip install gitpython
        pip install jira
        pip install termcolor 
        pip install openpyxl  
        pip install javalang
        pip install enum 
        pip install pathlib
        pip install junitparser
        pip install lizard

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    
    - name: Checkout bugminer
      uses: actions/checkout@v2
      with:
        repository: rotba/BugMiner
        path: .
        fetch-depth: 0
    
    - name: mvnpy
      run: |
        git submodule init
        git submodule update
    
    - name: Checkout javadiff
      uses: actions/checkout@v2
      with:
        repository: amir9979/javadiff
        path: ./javadiff
        fetch-depth: 0
    
    - name: execute miner
      run: python timeout.py 600 60 python Main.py ${{github.event.issue.title}} ${{ matrix.commit_ind }} ${{github.event.issue.body}}
    
        
#     - name: ls
#       run: ls -R

    - name: Upload log
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: ${{ matrix.commit_ind }}_log
        # A file, directory or wildcard pattern that describes what to upload
        path: ./results/${{github.event.issue.title}}/log.log
    

#     - name: Upload all
#       uses: actions/upload-artifact@v2
#       with:
#         # Artifact name
#         name: ${{ matrix.commit_ind }}_all
#         # A file, directory or wildcard pattern that describes what to upload
#         path: ./tested_projects/${{github.event.issue.title}}
    

    - name: add valids as a comment
      uses: actions/github-script@0.5.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require("fs");
          const path = "./results/" + "${{github.event.issue.title}}" + ".csv";
          const text = fs.readFileSync(path).toString();
          github.issues.createComment({
            issue_number: ${{github.event.issue.number}},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: text
            })
  
  aggregate:
      # The type of runner that the job will run on
      runs-on: windows-latest
      needs: build
      
      steps:
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 2.7

        - name: add all valids to one file
          shell: python
          run: |
              import json
              import os
              import csv
              import httplib
              with open(os.getenv('GITHUB_EVENT_PATH')) as json_file:
                            data = json.load(json_file)
                            issue_number = data['issue']['number']
              conn = httplib.HTTPSConnection("api.github.com")
              conn.request("GET","/repos/amir9979/bug_miner_runner/issues/{0}/comments".format(issue_number), "", {"User-Agent":"amir9979" , "Accept":"application/vnd.github.v3+json", "Authorization":"token ${{ secrets.GITHUB_TOKEN }}"})
              response = json.loads(conn.getresponse().read())
              print response
              bugs = list(map(lambda x: list(csv.reader(x['body'].split('\n'))), response))
              header = bugs[0][0]
              lines = [header] + reduce(list.__add__, map(lambda x: x[1:], bugs), [])
              with open("results.csv", "wb") as f:
                            csv.writer(f).writerows(lines)
        

        - name: Upload results to release
          uses: svenstaro/upload-release-action@v1-release
          with:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
            file: results.csv
            asset_name: ${{github.event.issue.title}}_${{github.event.issue.number}}.csv
            tag: ${{github.event.issue.title}}_${{github.event.issue.number}}

        - name: Close Issue
          continue-on-error: true
          uses: peter-evans/close-issue@v1
          with:
            comment: |
              The issue you have reported seems to be resolved now.
              The extracted data can be found at releases by number ${{github.event.issue.title}}_${{github.event.issue.number}}.
